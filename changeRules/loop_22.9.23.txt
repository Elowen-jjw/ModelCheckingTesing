我们的目的是做等价变换，不是优化。

一、添加代码存在的问题：
1. 多样性
2. 与测试用例无关的代码，可自成一个测试用例，额外添加这样的代码没意义？
    生成与测试用例有关的代码？

二、不额外添加代码的想法

1. 循环不变量：在循环中不变量的量。

（1）常量一定是循环不变量：替换成变量，在循环外声明该变量并赋成该常量的值。

Example：
//source code
int i = 0;
while (i < n) {
    x = y + z;
    a[i] = 6 * i + x * x;
    ++i;
}

//add invariant，把常量6提出来
int i = 0;
int invar = 6;
while (i < n) {
    x = y + z;
    a[i] = invar * i + x * x;
    ++i;
}

（2）循环中的变量：判断单个变量是否为不变量；不变量组合的表达式仍是不变量，如上例中的y+z、x*x。。
想法：
对循环体每条语句，按等号拆分等式左右两边的变量left[],right[]，原则是不变量一定不是多次赋值。
不变量满足：
①没有自运算，如x++
②左边的不变量不会在右边出现，如 "x = x+y; " 、"x += 2;"
③左边的不变量不会在之前的语句中出现，如 "x = 3;  x = 2;" 
④若右边存在light[i]不是不变量，则左边的变量一定不是不变量，如“y = y+1; x = y; "中x不是不变量。


2. 归纳变量：循环中每次迭代都存在的量。

形如：for( i_start; i < n; i_add){};  对循环中的每个±a，都可以写成 (±)a * ( ( i - i_start)/i_add ) + 1 )

（1）对每个等式右边的（±）变量：替换成在它之前最近的表达式。
（2）对每个等式右边的（±）常量：公式替换

Example
//source code
int foo(int n) {
    int i, j, sum;
    j = 5;
    sum = 0;
    for (i = 0; i < n; ++i) {
        j = j + 2;
        sum = sum + j;
    }
    return sum;
}

//reduction 1， 对 j = j + 2， 替换右边变量  j，更改常量 2
int foo(int n) {
    int i, j;
    j = 5;
    sum = 0;
    for (i = 0; i < n; ++i) {
        j = 5 + 2 * ( i+1);
        sum = sum + j;
    }
    return sum;
}


//reduction 2，对sum = sum + j，变替换右边变量 j 和 sum
extern int sum;
int foo(int n) {
    int i, j;
    j = 5;
    sum = 0;
    for (i = 0; i < n; ++i) {
        j = 5 + 2 * ( i+1)；
        sum = 0 + 5 + 2 * (i+1);
    }
    return sum;
}


    




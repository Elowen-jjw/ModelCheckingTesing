初始teatcase：只关心程序能够运行，不关心具体执行结果

1.循环不变量（while/for）
所有testcase：添加与循环体无关但是和循环体外identify有关的变量，形成表达式（赋值语句等）作为循环不变代码。 
循环不变量&循环不变量代码，与循环内部无关，但是与循环外定义的变量有关。
e.g. 循环外的变量进行运算组合，得到的表达式赋给一个变量t，t加入循环中

2.while to if-do-while （while）
1) while：if-do-while
2)do-while：加 if()condition是do-while的条件

3. loop fusion 循环合并 （for/while）
所有testcase：添加循环，要求保持表达式一致，循环体加入一些语句（和循环变量有关系,或者和之前的循环语句有某种先后关系）

Example 1：
//sourceCode
int Sum( int num[], int n ){
	int sum = 0;
	for( int i = 0; i < n; i++ ){
		sum = sum + num[i];
	}
	
	return sum;
}

//add loop
int Sum( int num[], int n ){
	int[] sum = new int[];
	for( int i = 0; i < n; i++ ){
		sum[i] = num[i]+i;
	}
	
	int t = 0;
	for( int i = 0; i < n; i++ ){
		t+=num[i];
	}
	return sum;
}


Example 2:
//不合法
DO I = 1, N
  S1: A(I) = B(I) + C1
ENDDO
DO I = 1, N
  S2: D(I) = A(I+1) + C2
ENDDO

合并上述两个循环是不合法的，因为在合并前S2中的A(I+1)会读到被第一个循环写入的值，而在合并后A(I+1)则会读入修改之前的值，于是数据依赖被破坏了，不合法的代码如下：
//不合法循环合并
DO I = 1, N
  S1: A(I) = B(I) + C1
  S2: D(I) = A(I+1) + C2
ENDDO

//合法——针对循环合并的合法性构造代码
DO I = 1, N
  S1: A(I) = B(I) + C1
ENDDO
DO I = 2, N+1
  S2: D(I-1) = A(I) + C2
ENDDO

//合法循环合并
A(1) = B(1) + C1
DO I = 2, N
  S1: A(I) = B(I) + C1
  S2: D(I-1) = A(I) + C2
ENDDO
D(N) = A(N+1) + C2

根据合法循环合并构造initial testcase（此部分感觉和循环流水线有些相似之处）
自己构造testcase：
1）改变循环次数N
2）改变ABCD数据类型（int,long,short,struct数组）
3）有无C1，C2常量

4.归纳变量 （for/ while手动筛选）
所有testcase：添加归纳变量（和循环变量有一些线性关系）

Example：添加变量 j
for (i = 0; i < 10; ++i) {
    j = 17 * i;
}

加一行：（j=）随机加减乘除、随机数字
多加几行，然后利用树遍历形成一行表达式
找一些更容易出问题的形式添加（形式复杂些？）

7.unrolling 循环展开（for）
所有testcase：满足展开次数是原循环次数的因数

8.unswitching（for/while）
1）循环嵌套if（187）：改变if中的condition（随机生成布尔类型代码），再拆成两个循环体
//Example
int[] a={};
for(int i=0; i<10; i++){
	a[i]=i+1;
	if(a[i]%2==0) 
		a[i]=0;
}

//updated
int[] a={};
int flag=random()%2==0?1:0;//或者别的复制方法 random会存在每次变换都会有不同的结果
for(int i=0; i<10; i++){
	a[i]=i+1;
	if(flag==1) 
		a[i]=0;
}
2）循环不嵌套if：添加 if 语句

六种变换之后的初始testcase分别被存放在6个文件夹下，变换前后的代码放在一个文件里，这样可以比较循环体内的对应的变量之间的关系，如循环结束时是否相等
e.g.
//source
for( ; ; ){
sum=  .....
}

//after
for( ; ; ){
sum1 = .....
}

cpa检查：if(sum != sum1 && 循环次数 && 循环条件) goto ERROR;

